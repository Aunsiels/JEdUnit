import static de.thl.jedunit.DSL.*;
import de.thl.jedunit.*;

import java.util.function.Function;
import java.util.function.Predicate;
import io.vavr.Tuple2;

/**
 * Please add your inspections and test cases for evaluation here.
 * - Configure your evaluation in the configure() method.
 * - First, all methods with an @Inspection annotation will be executed (in alphabetical order)
 * - Then, all methods with a @Test annotation will be executed automatically (in alphabetical order).
 */
public class Checks extends Constraints {

    @Override
    public void configure() {
        super.configure();

        // Remove here the files we want to ignore
        Config.EVALUATED_FILES.remove("Solution.java");
        Config.EVALUATED_FILES.remove("Checks.java");
        Config.STD_OUT_REDIRECTION = "/dev/null";

        // Config.CHECKSTYLE = false;                  // default: true
        // Config.CHECKSTYLE_PENALITY = 5;
        // Config.CHECKSTYLE_IGNORES.add("[NeedBraces]")
        // Config.CHECKSTYLE_IGNORES.remove("[MagicNumber]");

        // Config.ALLOWED_IMPORTS = Arrays.asList("java.util");

        // Config.ALLOW_LOOPS = false;                 // default: true
        // Config.LOOP_PENALTY = 100;

        // Config.ALLOW_METHODS = false;               // default: true
        // Config.METHOD_PENALTY = 100;
    
        // Config.ALLOW_LAMBDAS = false;               // default: true
        // Config.LAMBDA_PENALITY = 25;
    
        // Config.ALLOW_INNER_CLASSES = true;          // default: false
        // Config.INNER_CLASS_PENALTY = 25;
    
        // Config.ALLOW_GLOBAL_VARIABLES = true;       // default: false
        // Config.GLOBAL_VARIABLE_PENALTY = 25;
    
        // Config.CHECK_COLLECTION_INTERFACES = false; // default: true
        // Config,COLLECTION_INTERFACE_PENALTY = 25;
    
        // Config.ALLOW_CONSOLE_OUTPUT = true;         // default: false
        // Config.CONSOLE_OUTPUT_PENALTY = 25;
    }

    @Test(weight=1, description="Always True")
    public void testTrue() {
        this.grading(1, "Always true comment", true);
    }

    @Test(weight=1, description="Always True Private", isPublic=false)
    public void testTruePrivate() {
        this.grading(1, "Always true private comment", true);
    }

    @Test(weight=1, description="Test square")
    public void testSquare() {
        test(
           t(1, 1),
           t(2, 4),
           t(3, 10)
        ).each(
            d -> d._1 * d._1 == d._2,
            d -> "This is an explanation",
            d -> "This is an error"
        );
    }

}